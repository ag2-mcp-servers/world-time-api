# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:18:21+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field, RootModel


class DateTimeJsonResponse(BaseModel):
    abbreviation: str = Field(..., description='the abbreviated name of the timezone')
    client_ip: str = Field(..., description='the IP of the client making the request')
    datetime: str = Field(
        ...,
        description='an ISO8601-valid string representing the current, local date/time',
    )
    day_of_week: int = Field(
        ..., description='current day number of the week, where sunday is 0'
    )
    day_of_year: int = Field(..., description='ordinal date of the current year')
    dst: bool = Field(
        ..., description='flag indicating whether the local time is in daylight savings'
    )
    dst_from: Optional[str] = Field(
        None,
        description='an ISO8601-valid string representing the datetime when daylight savings started for this timezone',
    )
    dst_offset: int = Field(
        ...,
        description='the difference in seconds between the current local time and daylight saving time for the location',
    )
    dst_until: Optional[str] = Field(
        None,
        description='an ISO8601-valid string representing the datetime when daylight savings will end for this timezone',
    )
    raw_offset: Optional[int] = Field(
        None,
        description='the difference in seconds between the current local time and the time in UTC, excluding any daylight saving difference (see dst_offset)',
    )
    timezone: str = Field(
        ..., description='timezone in `Area/Location` or `Area/Location/Region` format'
    )
    unixtime: int = Field(..., description='number of seconds since the Epoch')
    utc_datetime: str = Field(
        ...,
        description='an ISO8601-valid string representing the current date/time in UTC',
    )
    utc_offset: str = Field(
        ..., description='an ISO8601-valid string representing the offset from UTC'
    )
    week_number: int = Field(..., description='the current week number')


class DateTimeTextResponse(RootModel[str]):
    root: str = Field(
        ...,
        description='time zone details, as per the DateTimeJsonResponse response, in the format `key: value`, one item per line',
    )


class ErrorJsonResponse(BaseModel):
    error: str = Field(..., description='details about the error encountered')


class ErrorTextResponse(RootModel[str]):
    root: str = Field(
        ..., description='details about the error encountered in plain text'
    )


class ListJsonResponse(RootModel[List[str]]):
    root: List[str] = Field(..., description='a list of available timezones')


class ListTextResponse(RootModel[str]):
    root: str = Field(..., description='a list of available timezones, one per line')
