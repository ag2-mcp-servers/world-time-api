# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:18:21+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity

from models import (
    DateTimeJsonResponse,
    DateTimeTextResponse,
    ErrorJsonResponse,
    ErrorTextResponse,
    ListJsonResponse,
    ListTextResponse,
)

app = MCPProxy(
    description='A simple API to get the current time based on a request with a timezone.',
    title='World Time API',
    version='20210108',
    servers=[{'url': 'http://worldtimeapi.org/api/'}],
)


@app.get('/ip', tags=['ip_time_requests'])
def get_ip():
    """
    request the current time based on the ip of the request. note: this is a "best guess" obtained from open-source data.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/ip.txt', tags=['ip_time_requests', 'timezone_time_requests'])
def get_ip_txt():
    """
    request the current time based on the ip of the request. note: this is a "best guess" obtained from open-source data.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/ip/{ipv4}', tags=['ip_time_requests'])
def get_ip__ipv4(ipv4: str):
    """
    request the current time based on the ip of the request. note: this is a "best guess" obtained from open-source data.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/ip/{ipv4}.txt', tags=['ip_time_requests'])
def get_ip__ipv4_txt(ipv4: str):
    """
    request the current time based on the ip of the request. note: this is a "best guess" obtained from open-source data.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/timezone', tags=['timezone_catalog'])
def get_timezone():
    """
    a listing of all timezones.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/timezone.txt', tags=['timezone_catalog'])
def get_timezone_txt():
    """
    a listing of all timezones.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/timezone/{area}', tags=['timezone_catalog'])
def get_timezone__area(area: str):
    """
    a listing of all timezones available for that area.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/timezone/{area}.txt', tags=['timezone_catalog'])
def get_timezone__area_txt(area: str):
    """
    a listing of all timezones available for that area.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/timezone/{area}/{location}', tags=['timezone_time_requests'])
def get_timezone__area__location(area: str, location: str = ...):
    """
    request the current time for a timezone.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/timezone/{area}/{location}.txt', tags=['timezone_time_requests'])
def get_timezone__area__location_txt(area: str, location: str = ...):
    """
    request the current time for a timezone.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/timezone/{area}/{location}/{region}', tags=['timezone_time_requests'])
def get_timezone__area__location__region(
    area: str, location: str = ..., region: str = ...
):
    """
    request the current time for a timezone.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/timezone/{area}/{location}/{region}.txt', tags=['timezone_time_requests'])
def get_timezone__area__location__region_txt(
    area: str, location: str = ..., region: str = ...
):
    """
    request the current time for a timezone.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
